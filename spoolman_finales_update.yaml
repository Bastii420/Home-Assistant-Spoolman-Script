#
# Home Assistant Script: Spoolman Multi-Color Update for Bambu Lab Printers
#
# Author: Bastii420
# Version: 1.0 (developed with the help of Google's Gemini)
# Date: June 18, 2025
#
# Description: 
# This script is called after a 3D print is finished. It iterates through all 
# four slots of the Bambu Lab AMS, reads the filament consumption per slot, and 
# updates the corresponding entry in the Spoolman database.
# It is suitable for both single- and multi-color prints.
#
# IMPORTANT: The RFID/UID of the Bambu filament spools must be entered into the
# "Lot Number" (lot_nr) field in Spoolman for the matching to work.
#

alias: Spoolman Final Update
description: Updates all used spools in Spoolman after a print (Multi-Color capable).
sequence:
  - variables:
      # =================================================================================
      # --- CUSTOMIZE (1/3): YOUR SENSOR NAMES ---
      # =================================================================================
      # Enter the exact entity IDs of your four AMS slot sensors here.
      # You can find them in Home Assistant's Developer Tools > States.
      ams_trays: &trays
        - sensor.p1s_01p00a380900656_ams_1_slot_1
        - sensor.p1s_01p00a380900656_ams_1_slot_2
        - sensor.p1s_01p00a380900656_ams_1_slot_3
        - sensor.p1s_01p00a380900656_ams_1_slot_4
        
      # Enter the entity ID of your weight sensor here.
      weight_sensor: 'sensor.p1s_01p00a380900656_gewicht_des_drucks'

      # =================================================================================
      # --- CUSTOMIZE (2/3): YOUR SPOOLMAN DEVICE ID ---
      # =================================================================================
      # This is the technical device ID of your Spoolman integration.
      # Find it using this code in the Developer Tools > Template editor:
      # {{ device_id('sensor.spoolman_spool_1') }} 
      # (This assumes you have at least one spool created in Spoolman).
      spoolman_device_id: 'b8990689ac4c22272096195e04f06214'

  # This loop iterates through the list of the four AMS sensors defined above.
  - repeat:
      for_each: *trays
      sequence:
        - variables:
            current_tray_sensor: "{{ repeat.item }}"
            slot_number: "{{ repeat.item.split('_')[-1] }}"
            weight_attribute_name: "AMS 1 Tray {{ slot_number }}"
            filament_used: "{{ state_attr(weight_sensor, weight_attribute_name) | float(0) }}"
            tag_uid: "{{ state_attr(current_tray_sensor, 'tag_uid') }}"
            # Find the matching spool in Spoolman by comparing the printer's RFID with the spool's Lot Number.
            matching_spool_id: >-
              {% set ns = namespace(id=none) %} 
              {% for spool_entity in device_entities(spoolman_device_id) %}
                {% if tag_uid | string == state_attr(spool_entity, 'lot_nr') | string %}
                  {% set ns.id = state_attr(spool_entity, 'id') %}
                  {% break %}
                {% endif %}
              {% endfor %} 
              {{ ns.id }}

        # Choose an action based on conditions.
        - choose:
            # This action is only executed if...
            - conditions:
                # ...filament was consumed (more than 0g) AND...
                - "{{ filament_used > 0 }}"
                # ...we found a matching spool ID in Spoolman.
                - "{{ matching_spool_id != none }}"
              # If both conditions are true, execute this sequence:
              sequence:
                # Call the Spoolman service to update the weight and last used time.
                - service: spoolman.patch_spool
                  data:
                    id: "{{ matching_spool_id }}"
                    used_weight: "{{ filament_used }}"
                    last_used: "{{ now().isoformat() }}"
# The 'parallel' mode allows, in theory, for all spool updates to be sent concurrently.
mode: parallel
max: 10
